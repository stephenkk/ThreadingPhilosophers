import java.util.concurrent.*; //IMPORT CONCURRENT TO HAVE ACCESS TO SEMAPHORE

//A shared resource/class. 
class Shared  
{ 
  static int count = 0; 
}

public class Philosopher extends Thread{
	Semaphore sem;		//DECLARE SEMAPHORE VARIABLE
	
	private int philNumber;
	static boolean stick0=true;	//one boolean for each chopstick
	static boolean stick1=true;	//true means not being used.
	static boolean stick2=true;	//ONLY DECLARING THE CHOPSTICKS USED BY PHIL0 AND PHIL1 FOR NOW
	static boolean stick4=true;
	
		
	
	
	
	//constructor created to require initial values to be specified
	//for philosopher number
	public Philosopher(int philNumber) {
		this.sem = sem;
		this.philNumber = philNumber;
		
		
	}	
	// the run method will start eat() only if the sticks to his left
	// and to his right are available (true)
	public void run() {
		if (this.philNumber == 0) {
			try {
				sem.acquire();
				if (stick4 == true && stick0 == true) {
					Shared.count++;
					eat();
				}
					
			} catch (InterruptedException e) {
				
				e.printStackTrace();
			}
			
		}
		if (this.philNumber == 1) {
			try {
				sem.acquire();
				if (stick0 == true && stick1 == true) {
					Shared.count++;
					eat();
				}
					
			} catch (InterruptedException e) {
				
				e.printStackTrace();
			}
		}
		}
		
		static Philosopher p0 = new Philosopher(0);//	ONLY INSTANTIATING TWO OBJECTS FOR NOW
		static Philosopher p1 = new Philosopher(1);
		

			//Philosopher array
			// static Philosopher[] WiseTable = {p0, p1};	//DON'T NEED THE ARRAY YET		
				
		
	public static void main(String[] args) {
		System.out.println("stick0 = " + stick0 + " stick1 = " + stick1);
		//VERIFY THAT STICK0 AND STICK1 START OUT AVAILABLE (TRUE)
		
		p0.start();		//each objects starts the run()
		p1.start();
		
		
		
}
	
	    	public void eat() {
	    		if (this.philNumber == 0) { //CHECK TO SEE WHICH PHIL HAS RUN()
	    			System.out.println("p0 started...");// INDICATE WHICH PHIL HAS RUN()
	    			stick4 = false; //PHIL0 PICKS UP STICK4 ON HIS LEFT
	    			System.out.println(this.philNumber + "picked up " + stick4);
	    					
	    			
	    			stick0 = false;//PHIL0 PICKS UP STICK0 ON HIS RIGHT
	    			
	    			System.out.println(this.philNumber + "picked up " + stick0);	
	    		}
	    		if (this.philNumber == 1) {//CHECK TO SEE WHICH PHIL HAS RUN()
	    			System.out.println("p1 started...");// INDICATE WHICH PHIL HAS RUN()
	    			stick0 = false;//PHIL1 PICKS UP STICK0 ON HIS LEFT
	    			System.out.println(this.philNumber + "picked up " + stick0);
	    			
	    			stick1 = false;//PHIL1 PICKS UP STICK1 ON HIS RIGHT
	    			
	    			System.out.println(this.philNumber + "picked up " + stick1);
	    		}
	    		
	    		
	    		
	    	}
	    	   	
	}
		
	
	

	

