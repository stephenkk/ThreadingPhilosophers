
public class Philosopher extends Thread{
	public int philNumber;
	public String name;
	public boolean eating;
	public boolean hungry;
	public boolean thinking;
	
	
	public Philosopher(int philNumber, String name) {
		this.philNumber = philNumber;
		this.name = name;
		this.eating = eating;
		this.hungry = hungry;
		this.thinking = thinking;
		
	}	
	

	public void run() { // the run method will start the philosopher eating if the conditions are correct 
		boolean clear_left;
		boolean clear_right;
		clear_left = check_left(this.philNumber);
		clear_right = check_right(this.philNumber);
		System.out.println(clear_left);
		System.out.println(clear_right);
	}
			
	 //Philosopher objects
			static Philosopher p0 = new Philosopher(0,"Confucius");
			static Philosopher p1 = new Philosopher(1, "Socrates");
			static Philosopher p2 = new Philosopher(2, "Plato");
			static Philosopher p3 = new Philosopher(3, "Descartes");
			static Philosopher p4 = new Philosopher(4, "Sartre");

			//Philosopher array
			static Philosopher[] WiseTable = {p0, p1, p2, p3, p4};			
				
		
	public static void main(String[] args) {
			
		
		p0.start();		//each objects starts the run()
		//p1.start();
		//p2.start();
		//p3.start();
		//p4.start();		
}
	public boolean check_right(int philNumber) {
		boolean not_eating_to_the_right;
		if (this.philNumber == 4)
			not_eating_to_the_right = WiseTable[0].eating;
		else 
			not_eating_to_the_right = WiseTable[this.philNumber + 1].eating;
		return not_eating_to_the_right;
	}
	
	public boolean check_left(int philNumber) {
		boolean not_eating_to_the_left;
		if (this.philNumber == 0)
			not_eating_to_the_left = WiseTable[4].eating;
		else 
			not_eating_to_the_left = WiseTable[this.philNumber - 1].eating;
		return not_eating_to_the_left;
		
	}
	}
	

	

